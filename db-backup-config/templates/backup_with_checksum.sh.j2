#!/bin/bash
set -euo pipefail

STANZA="{{ pgbackrest_stanza }}"
LOG_DIR="/var/log/pgbackrest"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
ACTION="$1"
SLACK_WEBHOOK="{{ slack_webhook_url }}"

# Ensure log directory exists
mkdir -p "$LOG_DIR"

# Function to log messages
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$ACTION] $1" | tee -a "$LOG_DIR/backup_checksum.log"
}

# Function to get last N lines of log and format for Slack
get_log_summary() {
    local log_file="$1"
    local lines="${2:-10}"
    
    if [[ -f "$log_file" ]]; then
        # Get last N lines, escape special characters for JSON
        tail -n "$lines" "$log_file" | sed 's/\\/\\\\/g; s/"/\\"/g; s/$/\\n/' | tr -d '\n'
    else
        echo "Log file not found: $log_file"
    fi
}

# Enhanced function to send Slack notification with error details
send_slack_notification() {
    local status="$1"
    local message="$2"
    local error_log="${3:-}"
    
    if [[ -n "$SLACK_WEBHOOK" ]]; then
        local emoji="✅"
        local color="good"
        
        if [[ "$status" == "FAILED" ]]; then
            emoji="❌"
            color="danger"
        elif [[ "$status" == "WARNING" ]]; then
            emoji="⚠️"
            color="warning"
        fi
        
        # Prepare the base payload
        local payload="{
            \"attachments\": [{
                \"color\": \"$color\",
                \"title\": \"$emoji PostgreSQL Backup Report - {{ inventory_hostname }}\",
                \"fields\": [
                    {\"title\": \"Action\", \"value\": \"$ACTION\", \"short\": true},
                    {\"title\": \"Status\", \"value\": \"$status\", \"short\": true},
                    {\"title\": \"Timestamp\", \"value\": \"$(date '+%Y-%m-%d %H:%M:%S')\", \"short\": true},
                    {\"title\": \"Server\", \"value\": \"{{ inventory_hostname }}\", \"short\": true}"
        
        # Add error log details if status is FAILED and log exists
        if [[ "$status" == "FAILED" && -n "$error_log" && -f "$error_log" ]]; then
            local log_summary=$(get_log_summary "$error_log" 15)
            payload="${payload},
                    {\"title\": \"📋 Error Log Summary (Last 15 lines)\", \"value\": \"\\`\\`\\`${log_summary}\\`\\`\\`\", \"short\": false}"
        fi
        
        payload="${payload}
                ],
                \"text\": \"$message\"
            }]
        }"
        
        curl -X POST -H 'Content-type: application/json' \
            --data "$payload" \
            "$SLACK_WEBHOOK" || log_message "Failed to send Slack notification"
    fi
}

# Function to verify checksums
verify_checksums() {
    log_message "Starting checksum verification..."
    
    local checksum_log="$LOG_DIR/checksum_verify_$TIMESTAMP.log"
    
    if pgbackrest --stanza="$STANZA" check 2>&1 | tee "$checksum_log"; then
        log_message "✓ Checksum verification PASSED"
        pgbackrest --stanza="$STANZA" info --output=json > "$LOG_DIR/backup_checksum_info_$TIMESTAMP.json"
        log_message "✓ Backup checksum info saved"
        return 0
    else
        log_message "✗ Checksum verification FAILED"
        return 1
    fi
}

# Function to perform backup with checksum verification
perform_backup() {
    local backup_type="$1"
    log_message "Starting $backup_type backup..."
    
    # Get backup start time
    local start_time=$(date '+%s')
    local backup_log="$LOG_DIR/backup_${backup_type}_$TIMESTAMP.log"
    
    # Capture both stdout and stderr to the log file
    if pgbackrest --stanza="$STANZA" --type="$backup_type" backup 2>&1 | tee "$backup_log"; then
        local end_time=$(date '+%s')
        local duration=$((end_time - start_time))
        
        log_message "✓ $backup_type backup completed successfully in ${duration}s"
        
        if verify_checksums; then
            log_message "✓ Post-backup checksum verification PASSED"
            
            # Send success notification
            {% if notify_on_success %}
            send_slack_notification "SUCCESS" "$backup_type backup completed successfully in ${duration}s with checksum verification passed"
            {% endif %}
            return 0
        else
            log_message "✗ Post-backup checksum verification FAILED"
            
            # Send failure notification with checksum log
            {% if notify_on_failure %}
            local checksum_log="$LOG_DIR/checksum_verify_$TIMESTAMP.log"
            send_slack_notification "FAILED" "$backup_type backup completed but checksum verification failed" "$checksum_log"
            {% endif %}
            return 1
        fi
    else
        log_message "✗ $backup_type backup FAILED"
        
        # Send failure notification with backup log
        {% if notify_on_failure %}
        send_slack_notification "FAILED" "$backup_type backup failed to complete" "$backup_log"
        {% endif %}
        return 1
    fi
}

# Main execution
case "$ACTION" in
    "full"|"incr"|"diff")
        log_message "=== Starting $ACTION backup with checksum verification ==="
        
        if perform_backup "$ACTION"; then
            log_message "=== $ACTION backup and checksum verification completed successfully ==="
            exit 0
        else
            log_message "=== $ACTION backup or checksum verification FAILED ==="
            exit 1
        fi
        ;;
    "verify")
        log_message "=== Starting checksum verification only ==="
        local verify_log="$LOG_DIR/checksum_verify_$TIMESTAMP.log"
        
        if verify_checksums; then
            log_message "=== Checksum verification completed successfully ==="
            {% if notify_on_success %}
            send_slack_notification "SUCCESS" "Scheduled checksum verification completed successfully"
            {% endif %}
            exit 0
        else
            log_message "=== Checksum verification FAILED ==="
            {% if notify_on_failure %}
            send_slack_notification "FAILED" "Scheduled checksum verification failed" "$verify_log"
            {% endif %}
            exit 1
        fi
        ;;
    *)
        log_message "Invalid action: $ACTION. Use: full, incr, diff, or verify"
        send_slack_notification "FAILED" "Invalid backup action: $ACTION"
        exit 1
        ;;
esac